// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Phoenix$ReactTemplate = require("../bindings/Phoenix.bs.js");

var endPoint = "ws://localhost:4000/socket";

var socketOpts = {
  timeout: 10000,
  logger: (function (kind, msg, data) {
      console.log(kind + (": " + (msg + (", " + data))));
      return /* () */0;
    })
};

var mySocket = Phoenix$ReactTemplate.Socket[/* init */0](Caml_option.some(socketOpts), endPoint);

Phoenix$ReactTemplate.Socket[/* connect */1](undefined, mySocket);

mySocket.onOpen((function (param) {
        console.log(mySocket.isConnected());
        return /* () */0;
      }));

mySocket.onError((function (param) {
        console.log("Socket in error!");
        return /* () */0;
      }));

mySocket.onClose((function (param) {
        console.log("Socket closed!");
        return /* () */0;
      }));

console.log("SOCKET : ", mySocket);

function putOn($$event, f, channel) {
  channel.on($$event, f);
  return channel;
}

function putReceive($$event, handleReceive, push) {
  push.receive($$event, handleReceive);
  return push;
}

var joinChannel = Phoenix$ReactTemplate.Channel[/* join */0];

function handleReceive($$event, any) {
  switch ($$event) {
    case "error" : 
        console.log(/* tuple */[
              "handleReiceive:" + $$event,
              "Failed to join channel"
            ]);
        return /* () */0;
    case "ok" : 
        console.log(/* tuple */[
              "handleReiceive:" + $$event,
              "Joined"
            ]);
        return /* () */0;
    default:
      console.log(/* tuple */[
            "handleReiceive:" + $$event,
            any
          ]);
      return /* () */0;
  }
}

function handleEvent($$event, response) {
  console.log(/* tuple */[
        "handleEvent:" + $$event,
        response
      ]);
  return /* () */0;
}

var myChannel = Phoenix$ReactTemplate.Socket[/* channel */3](undefined, "system", mySocket);

var myPresence = Phoenix$ReactTemplate.Presence[/* init */0](undefined, myChannel);

var listBy = (
  (id, { metas: [first, ...rest] }) =>
    Object.assign({}, first, { id, count: rest.length + 1 })
);

myPresence.onSync((function (param) {
        var loggedInUsers = myPresence.list(listBy);
        console.log(loggedInUsers);
        return /* () */0;
      }));

console.log("PRESENCE : ", myPresence);

putReceive("error", (function (param) {
        return handleReceive("error", param);
      }), putReceive("ok", (function (param) {
            return handleReceive("ok", param);
          }), joinChannel(undefined, putOn("ping", (function (param) {
                    return handleEvent("ping", param);
                  }), myChannel))));

console.log(myChannel.state);

console.log("CHANNEL : ", myChannel);

setTimeout((function (param) {
        console.log(mySocket.isConnected());
        Phoenix$ReactTemplate.Socket[/* disconnect */2](undefined, undefined, undefined, mySocket);
        console.log("Disconnected!");
        console.log(mySocket.isConnected());
        return /* () */0;
      }), 10000);

function str(prim) {
  return prim;
}

var component = ReasonReact.statelessComponent("Channels");

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              return React.createElement("div", undefined, React.createElement("h2", undefined, "Channels"));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.endPoint = endPoint;
exports.socketOpts = socketOpts;
exports.mySocket = mySocket;
exports.putOn = putOn;
exports.putReceive = putReceive;
exports.joinChannel = joinChannel;
exports.handleReceive = handleReceive;
exports.handleEvent = handleEvent;
exports.myChannel = myChannel;
exports.myPresence = myPresence;
exports.listBy = listBy;
exports.str = str;
exports.component = component;
exports.make = make;
/* mySocket Not a pure module */
